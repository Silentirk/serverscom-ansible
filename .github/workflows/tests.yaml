---
name: Ansible collection

'on':
  push:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install yamllint
        run: sudo apt install yamllint
      - name: Lint
        run: yamllint .

  quick_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version:
          - "3.8"
          # - "3.9"
          # - "3.10"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Sanity tests with dependencies
        run: ansible-test sanity --requirements --python ${{ matrix.python_version }}
        working-directory: ansible_collections/serverscom/sc_api
      - name: Unit tests with dependencies
        run: ansible-test units --requirements --python ${{ matrix.python_version }}
        working-directory: ansible_collections/serverscom/sc_api
      - name: Try-build by ansible-galaxy
        run: ansible-galaxy collection build
        working-directory: ansible_collections/serverscom/sc_api

  integration_tests:
    runs-on: ubuntu-latest
    needs: quick_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Unit tests with dependencies
        run: ansible-test units --requirements --python 3.8  # add integration here
        working-directory: ansible_collections/serverscom/sc_api

  build:
    runs-on: ubuntu-latest
    needs: integration_tests
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Remove tests from final distribution
        run: rm -r tests/
        working-directory: ansible_collections/serverscom/sc_api
      - name: Build collection
        run: ansible-galaxy collection build
        working-directory: ansible_collections/serverscom/sc_api
      - name: Extract version
        id: version
        run: |
          version=$(cat galaxy.yml |grep ^version|awk '{print $2}')
          echo "::set-output name=version::$version"
        working-directory: ansible_collections/serverscom/sc_api
      - name: Print artifact info
        run: |
          ls -la serverscom-sc_api-${{ steps.version.outputs.version }}.tar.gz
          sha512sum serverscom-sc_api-${{ steps.version.outputs.version }}.tar.gz
          tar tzf serverscom-sc_api-${{ steps.version.outputs.version }}.tar.gz
        working-directory: ansible_collections/serverscom/sc_api
      - name: Save artifact
        if: ${{ endsWith(github.ref, steps.version.outputs.version) }}
        uses: actions/upload-artifact@v2
        with:
          name: sc_api
          path: ansible_collections/serverscom/sc_api/serverscom-sc_api-${{ steps.version.outputs.version }}.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ endsWith(github.ref, needs.build.outputs.version) }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: sc_api
      - name: Debug output
        run: ls -la serverscom-sc_api-${{needs.build.outputs.version }}.tar.gz
      - name: Upload collection to galaxy
        run: ansible-galaxy collection publish serverscom-sc_api-${{ needs.build.outputs.version }}.tar.gz --api-key="${{ secrets.GALAXY_API_TOKEN }}"
